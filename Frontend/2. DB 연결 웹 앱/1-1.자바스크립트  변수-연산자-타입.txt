[변수]

변수는 var, let, const로 선언할 수 있음. 어떤 것을 사용하는가에 따라 변수의 유효범위(scope)가 달라짐.
let과 const는 ES6에 있는 기능들. 그 전 코드들은 var로 선언을 많이 함.
const는 한 번 할당한 값에 재할당하는 것이 불가능.

ex)
var a = 2;
var a = "aaa";
var a = 'aaa';
var a = true;
var a = [];
var a = {};
var a = undefined;


[연산자]

연산자의 우선순위 표현은 ()사용.
+,-,*,/,% 등
논리연산자, 관계연산자, 삼항연산자도 존재

ex)
const name = "crong";
const result = name || "codesquad";
console.log(result);
const name = "";
const result = name || "codesquad";

-> or연산자. name이 있으면 name이 쓰이고 없으면 codesquad가 쓰임
    왼쪽이 어떤 상황을 만족하면 오른쪽은 전혀 확인하지 않음
    (and연산자의 경우 양쪽을 무조건 확인하게 되어 있음)


[연산자 - 삼항연산자]

간단한 비교와 값 할당은 삼항연산자를 사용할 수 있음
if문 등 조건문을 아주 간단하게 표현할 수 있음

const data = 11;
const result = (data > 10) ? "ok" : "fail";
console.log(result);


[연산자 - 비교연산자]

비교는 ==보다는 ===를 사용한다.
===은 정확한 타입까지 비교를 하게 되어 있음.
==를 사용하면 다음과 같은 다양한 오류 상황이 존재한다.
자바스크립트는 ==을 사용할 경우 최대한 타입을 암묵적으로 바꿔서 비교를 하게 되어있기 때문(ex. null과 undefine을 비교할 경우, 너 혹시 0과 0을 비교한 거 아니야?)

0 == false;
"" == false;
null == false;
0 == "0";
null == undefined;


[자바스크립트의 Type]

다양한 것이 존재.
undefined, null, boolean, number, string, object, function

타입을 직접 쓰지 않음.
타입은 선언할 때가 아니고, 실행타임에 결정된다. 함수 안에서의 패러미터나 변수는 실행될 때 그 타입이 결정된다.
타입이 없는 언어라고 하기보다는 타입이 나중에 결정되는, 실행타임에 결정되는 언어라고 이야기할 수 있음.

function run(a) {
	console.log(typeof a);
}
run("asdf") -> string
run(false) -> boolean

타입을 체크하는 또렷한 방법은 없다. 정확하게는 toString.call을 이용해서 그 결과를 매칭하고는 하는데, 문자/숫자와 같은 기본타입은 typeof키워드를 사용해서 체크할 수 있다.
그러나 typeof로 확인할 수 없는 것들이 많이 있음. 
배열의 경우 타입을 체크하는 isArray함수가 표준으로 있다(브라우저 지원범위를 살펴보고 사용해야 함).
