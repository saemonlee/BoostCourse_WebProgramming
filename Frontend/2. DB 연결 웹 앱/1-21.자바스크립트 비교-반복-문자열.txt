[비교문]

if, else if, else를 통해서 다양한 비교문을 사용할 수 있다.
여러 줄로 코딩할 때는 브레이스 환경이 필요.
간단한 것들은 블록(브레이스) 없이 코딩하는 경우도 많이 있음

ex)
if(true) console.log(true)
else console.log(false)

if문이 아닌 삼항연산자로도 어떤 값을 해결할 수 있음

ex)
var a = true;
var result = (a) ? "ok" : "not ok";
console.log(result); 
-> ok 출력

var a = "something";
var result = (a) ? "ok" : "not ok";
console.log(result); 
-> ok 출력

var a = "";
var result = (a) ? "ok" : "not ok";
console.log(result); 
-> not ok 출력


[분기 - switch]

로직을 분기하기 위해 if문 이외에도 switch문을 통해서도 해결할 수 있다.
if와 switch를 명확히 구분하는 것은 어려움.
if는 혹시 이거니? 혹시 이거니? 이런 식으로 확인하는 것이라면,
switch는 어떤 case들이 주어져 있고, 그것을 처리하는 개념
case라고 하는 대등한 것들이 나열되는 느낌이지만, 헷갈리면 if문을 더 많이 써도 상관은 없음.

그래서 모든 case가 없을 때는 default값으로 처리가 된다는 것도 알아두면 좋다.
또한 break문을 만나면 종료된다는 것 또한 일반적인 프로그래밍이랑 비슷.


[반복]

for문이나 while문을 사용해서 반복문을 구현할 수 있다.

for

function howMany(selectObject) {
	var numberSelected = 0;
	for (var i = 0; i < selectObject.options.length; i++) {
		if (selectObject.options[i].selected) {
			numberSelected++;
		}
	}
	return numberSelected;
}

-> 자바스크립트 함수에 루프를 돌 때마다 length값을 계산하는 건 비효율적. 그렇기에 for문에 앞서 길이를 나타내는 객체를 미리 선언하거나,

for(var i = 0, len = arr.options.length; i < len; i ++) {}
 
이런 식으로 길이를 나타내는 객체를 조건 중간에 넣어주거나,
for문의 성능을 미미하게라도 개선하기 위해서는

for(var i = arr.lengh, i >= 0, i--) {}

와 같이 리버스해서 돌리는 것도 많이 함
그러나 성능차이가 그리 크지 않기에 일반적으로는 코드의 가독성에 우선 집중하는 것이 좋음.

배열의 경우 forEach와 같은 메서드도 있고,
for-of(최신버전에서 새로 나온 거라 브라우저 호환성 이슈 존재)를 통한 탐색도 자주 사용됨(for-in은 객체를 탐색할 때 사용)
처음 자바스크립트를 익힐 때는 일반적인 for문을 이용하면 충분히 대부분의 반복 작업을 할 수 있음.


[문자열 처리]

자바스크립트의 문자와 문자열은 모두 문자열(string) 타입.

typeof "abc";   //string
typeof "a"      //string
typeof 'a'      //string. single quote도 사용가능.

문자열에 대한 다양한 메서드가 있음

"ab:cd".split(":");         //["ab", "cd"]
"ab:cd".replace(":", "$");  //"ab$cd"
" abcde ".trim();           //"abcde"

문자열, 배열 이런 것들을 선언해놓고 . 하고 어떤 메서드를 쓸 수 있는 게 자바스크립트의 특징.
그냥 문자열만 선언해도 내부적으로는 객체로 변환이 되기 때문에 객체 내에 있는 메서드를 쓰는 것이 가능.
