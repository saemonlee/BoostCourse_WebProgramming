[함수 - 함수의 선언]

함수는 여러 개의 인자를 받아서 그 결과를 출력.

패러미터의 갯수와 인자의 갯수가 일치하지 않아도 오류가 나지 않는다.
패러미터가 1개일 때 인자의 갯수가 0개라면, 패러미터(매개변수)는 undefined라는 값을 가지게 된다. 값이 할당되지 않았기 때문이다.
패러미터의 갯수보다 인자의 갯수가 많은 경우에는 입력된 인자값 중 앞에서부터 패러미터의 갯수만큼 사용하게 됨.

function printName(firstname) {
	var myname = "jisu";
	return myname + " " + firstname;
}

console.log(printName())
-> jisu undefined

console.log(printName("lee", "crong"))
-> jisu lee

위와 같이 짜여져 있는 함수의 모습을 함수선언문이라고 한다. 


[함수 - 함수표현식]

함수는 아래 모습과 같이 표현할 수도 있다.

function test() {
	console.log(printName());
	var printName = function() {
		return 'anonymouse';
	}
}
-> 밖에는 함수선언문, 안은 함수표현식
test();
-> 오류. 

변수값에 함수표현을 담아놓았기에 함수표현식이라고 함.
이렇게 표현하면 함수선언문과 달리 선언과 호출순서에 따라서 정상적으로 함수가 실행되지 않을 수 있다.
선언문을 더 자주 사용하지만, 어떤 코딩컨벤션에서는 표현식을 권장하기도 한다.

함수선언문에는 함수정보를 함수로 인식하기에 함수를 먼저 호출하고 그 뒤에 그 함수를 선언해도 그것을 인식해서 제대로 동작하지만,
함수표현식에서는 그렇지 않기에 함수를 먼저 호출하고 뒤에 함수를 변수로 선언할 경우,
선언은 되어있지만 할당이 되어있지 않은 변수값인 undefined로 인식하게 됨. 그래서 함수로 인식하지 못해 오류가 발생.


[함수 - 표현식과 호이스팅]

앞선 printName이 "printName is not defined"라고 오류가 나지 않고 function이 아니라고 나온 이유는,
printName이 실행되는 순간 'undefined'로 지정됐기 때문.

자바스크립트에서는 함수가 실행이 될 때, 함수가 실행되기 전에 함수에 대한 코드를 자바스크립트 파서가 한 번 쭉 훑어서 어떤 내용이 있는지,
어떤 것이 변수이고 어떤 것이 함수인지 이런 것들을 먼저 기억을 해둔 후 실행을 하게 됨.
그런 식으로 자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 미리 다 모아서 선언.
함수 안에 있는 변수들을 모두 끌어올려 선언한다고 해서, hoisting이라고 한다.

hoisting은 함수와 변수가 다르게 동작.
함수로 선언된 경우에는 함수 내용이 통째로 끌어올려 선언되지만,
변수로 선언된 경우에는 단순히 변수 이름 자체만 선언되기에 undefined값이 할당됨.

따라서 아래 코드 역시 함수를 값으로 가지지만 어쨌든 printName도 변수임으로 끌어 올려지게 되고,
값이 할당되지 전에 실행됐음으로 undefined가 할당된 상태이다.

printName(); //아직 printName이 undefined로 할당된 상태다.
var printName = function() {}

printName이라는 변수가 존재하고 아직 값이 할당되지 전임으로 printName에는 'undefined'라는 기본 값이 할당된 셈이다.


[함수 - 반환값과 undefined]

아래 함수의 반환값은 무엇일까?

function printName(firstname) {
	var myname = "jisu";
	var result = myname + " " + firstname;
}

정답은 undefined이다. 자바스크립트 함수는 반드시 return값이 존재하며, 없을 때는 기본 반환값인 'undefined'가 반환된다.


[함수 - arguments속성]

함수가 실행되면 그 안에서 arguments라는 특별한 지역변수가 존재한다.
자바스크립트 함수는 선언한 패러미터보다 더 많은 인자를 보낼 수도 있다.
이때 넘어온 인자를 arguments로 배열의 형태(array-like)로 하나씩 접근할 수가 있다.
arguments는 배열타입이 아니기에 배열의 메서드를 사용할 수 없다.

function a() {
	console.log(arguments);
}
a(1,2,3);
-> {'0' : 1, '1' : 2, '2' : 3} //오브젝트에 가까움

function a() {
	for(var i=0, i < arguments.length; i++) {
		console.log(arguments[i]);
	}
}
a(1, 2, 3);
-> 이런 식으로 arguments를 for문을 이용해서 출력할 수도 있음

function a() {
	console.log('my name is ', arguments[2])
}
a(1,2,"jisu");
->함수만 봐서는 세 번째 값에 무엇이 올지 알 수 없지만,
my name is jisu가 출력됨

이외에도 조건문에 arguments.length를 활용하는 것도 가능.

자바스크립트의 가변인자를 받아서 처리하는 함수를 만들 때 등에서 arguments속성을 유용하게 사용할 수 있다.

그러나 너무 arguments를 이용하는 것도 바람직하진 않음. 필요한 경우(체크 등)에만 사용해야.
또한 arguments가 수정이 된다 하더라도 함부로 수정하려 해도 안됨.

#해 볼만한 것(1~무한대까지 인자를 받아 합을 구하는 함수를 만들어보자) 참고자료


[좀 더 알아볼 것]

arrow function

ES2015에는 arrow function이 추가됐다. 간단하게 함수를 선언할 수 있는 문법으로 처음에는 꽤 낯설다.
하지만 점점 많이 사용되고 있는 syntax이므로 같이 알아 두어도 좋겠다.

function getName(name) {
	return "Kim" + name;
}

위의 함수는 아래 arrow함수와 같다.

var getName = (name) => "Kim" + name;

