<JDBC란?>

[개요 - 정의]

- JDBC(Java Database Connectivity)의 정의
    - 자바를 이용한 데이터베이스 접속과 SQL 문장의 실행, 그리고 실행 결과
    - 자바 프로그램 내에서 SQL문을 실행하기 위한 자바 API
    - SQL과 프로그래밍 언어의 통합 접근 중 한 형태

- JAVA는 표준 인터페이스인 JDBC API를 제공
- 데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버(driver)를 제공


[개요 - 환경 구성]

- JDK 설치
- JDBC 드라이버 설치
    - Maven에 다음과 같은 의존성을 추가한다. MySQL사이트에서 다운로드

    <dependency>
        <groupId>mysql</groupId>
        <artfactId>mysql-connector-java</artifactId>
        <version>5.1.45</version>
    </dependency>


[JDBC사용 - 단계별 정리]

- JDBC를 이용한 프로그래밍 방법
    1단계 : import java.sql.*;
    2단계 : 드라이버를 로드(각각의 DB벤더가 정해놓은 것을 사용)
    3단계 : Connection 객체를 생성(DB에 접속하는 부분)
    4단계 : Statement 객체를 생성 및 질의 수행(쿼리문 생성, 실행)
    5단계 : SQL문에 결과물이 있다면(쿼리문이 무엇인가에 따라 다르게 실행된다는 뜻) ResultSet 객체를 생성
    6단계 : 모든 객체를 닫음


[JDBC 클래스의 생성단계]

DriverManager(이 객체가 가지고 있는 메서드를 이용해 드라이버를 로딩)를 이용해서 Connection인스턴스를 얻음
-> Connection을 통해서 Statement를 얻음
-> Statement를 이용해 ResultSet을 얻음

닫을 때는 열었던 반대 순서대로 닫아야 함


[JDBC사용 - 단계별 설명1]

- IMPORT

import java.sql.*;

DriverManager, Connection, Statement 등의 인터페이스가 들어있음

- 드라이버 로드

Class.forName("com.mysql.jdbc.Driver");

Class라는 클래스가 갖고 있는 forName라는 메서드를 이용하면 string으로 입력한 객체가 메모리에 올라감
어떤 DB벤더를 이용하느냐에 따라 들어가는 값은 달라짐

- Connection 얻기

String dburl = "jdbc:mysql://localhost/dbName";
Connection con = DriverManager.getConnection(dburl, ID, PWD);

Connection 객체를 얻어낼 때 사용하는 객체가 DriverManager 객체
DriverManager가 갖고 있는 getConnection 메서드를 이용하면 DB에 연결
이 때 입력해야 할 것은 db가 있는 url주소, 아이디, 패스워드
db의 url을 정하는 방식도 어떤 DB를 사용하느냐에 따라 조금씩 다름


[소스코드]

public static Connection getConnection() throws Exception{
	String url = "jdbc:oracle:thin:@117.16.46.111:1521:xe";
	String user = "smu";
	String password = "smu";
	Connection conn = null;
	Class.forName("oracle.jdbc.driver.OracleDriver");
	conn = DriverManager.getConnection(url, user, password);
	return conn;
}


[JDBC사용 - 단계별 설명2]

- Statement 생성

Statement stmt = con.createStatement();

쿼리를 사용하기 위해서는 반드시 Statement라는 객체를 얻어내야 함
con(Connection)의 createStatement 메서드를 이용해서 얻어냄

- 질의 수행

ResultSet rs = stmt.executeQuery("select no from user");

Statement 객체를 생성했으면 이 객체에 쿼리문을 작성
executeQuery 메서드를 이용해서 실행. 이 메서드는 실행할 쿼리가 Select냐 Insert냐, Update냐, Delete냐에 따라 조금씩 달라짐(참고)
그리고 이 stmt 객체를 이용해서 ResultSet을 얻어낼 수 있음

-- 참고
    stmt.execute("query"); -> any SQL
    stmt.executeQuery("query"); -> SELECT
    stmt.executeUpdate("query"); -> INSERT, UPDATE, DELETE


[JDBC사용 - 단계별 설명3]

- ResultSet으로 결과 받기

ResultSet rs = stmt.executeQuery("select no from user");
while (rs.next())
    System.out.println(rs.getInt("no"));

현재 ResultSet은 데이터베이스 쪽에 있으며, 그것으로부터 레퍼런스를 받아 변수를 생성. 왜냐 하면 한꺼번에 막대한 양의 데이터를 가져오게 되면 문제가 될 수 있기 때문. 그래서 레퍼런스를 통해 하나씩 꺼내오게 됨
이런 식으로 계속 다음 내용을 반환하다가, 없으면 false를 반환

- Close

rs.close();
stmt.close();
con.close();


[소스코드]

guestbook 테이블에 들어있는 모든 데이터를 꺼내오기 위한 코드

public List<GuestBookVO> getGuestBookList(){
		List<GuestBookVO> list = new ArrayList<>();
		GuestBookVO vo = null;
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try{
			conn = DBUtil.getConnection(); // 좀 더 효율적인 작성을 위해 접속하는 객체를 따로 빼놓음
			String sql = "select * from guestbook";
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while(rs.next()){
				vo = new GuestBookVO();
				vo.setNo(rs.getInt(1));
				vo.setId(rs.getString(2));
				vo.setTitle(rs.getString(3));
				vo.setConetnt(rs.getString(4));
				vo.setRegDate(rs.getString(5));
				list.add(vo);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			DBUtil.close(conn, ps, rs);
		}		
		return list;		
	}


[소스코드]

한 건 입력하는 코드
윗 코드처럼 반복적으로 쓰이는 코드들이 있음을 확인할 수 있음
프레임워크를 이용하면 이렇게 반복적으로 쓰이는 코드들은 알아서 실행시켜 줌

public int addGuestBook(GuestBookVO vo){
		int result = 0;
		Connection conn = null;
		PreparedStatement ps = null;
		try{
			conn = DBUtil.getConnection();
			String sql = "insert into guestbook values("
					+ "guestbook_seq.nextval,?,?,?,sysdate)";
			ps = conn.prepareStatement(sql);
			ps.setString(1, vo.getId());
			ps.setString(2, vo.getTitle());
			ps.setString(3, vo.getConetnt());
			result = ps.executeUpdate();
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			DBUtil.close(conn, ps);
		}
		
		return result;
	}


[소스코드]

닫는 코드

public static void close(Connection conn, PreparedStatement ps){
		if (ps != null) {
			try {
				ps.close();
			} catch (SQLException e) {e.printStackTrace(); }
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {e.printStackTrace();}
		}
	}
