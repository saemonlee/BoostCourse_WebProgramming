[JSTL이란?]

JSTL(JSP Standard Tag Library)은 JSP 페이지에서 조건문 처리, 반복문 처리 등을
html tag형태로 작성할 수 있게 도와줌
->
JSP로 인해 개발의 편의성은 높아졌지만 HTML 태그와 자바 코드가 섞여있어 프런트 개발자가 해당 코드를 수정하기 힘들었음.
결국 유지 보수가 어려워짐.

이 문제를 해결하기 위해 등장한 것이 JSTL.
JSTL은 태그 형식으로 로직을 수행할 수 있도록 도와줌. 프런트 개발자에게 친숙함.


[JSTL을 사용하려면?]

http://tomcat.apache.org/download-taglibs.cgi
위의 사이트에서 3가지 jar파일을 다운로드 한 후 WEB-INF/lib/ 폴더에 복사.


[코어태그: 변수 지원 태그 - set, remove]

변수 설정: 지정한 영역에 변수를 생성

문법)

<c:set var="varName" scope="session" value="someValue" />

<c:set var="varName" scope="request">
some Value
</c:set>

- var - EL에서 사용될 변수명
- scope - 변수값이 저장될 영역(page, request, session, application)
- value - 변수값


변수 제거

문법)

<c:remove var="varName" scope="request" />


[코어태그: 변수 지원 태그 - 프로퍼티, 맵의 처리]

문법)

<c:set target="${some}" property="propertyName" value="anyValue" />

some 객체가 자바빈일 경우: some.setPropertyName(anyValue)
some 객체가 맵(map)일 경우: some.put(propertyName, anyValue);

- target - <c:set>으로 지정한 변수 객체
- property - 프로퍼티 이름
- value - 새로 지정할 프로퍼티 값


변수 지원 태그를 이용해 프로퍼티나 맵을 처리할 수 있음
자바를 공부할 때 객체에 property란 용어가 나오면, 이 객체의 값을 변경하거나 읽어들이기 위한 getter, setter 메서드를 생각하면 됨.

set 태그를 이용해 특정 객체의 메서드에 값을 전달할 수 있음


[코어태그: 흐름제어 태그 - if]

자바의 if와는 달리 else에 대한 처리는 없음.

문법)

<c:if test="조건">
...
... (test의 조건이 true이면 몸체 내용을 처리)
</c:if>


예제)

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:if test="true">
무조건 수행<br>
</c:if>

<c:if test="${param.name == 'bk'}">
name 파라미터의 값이 ${param.name} 입니다. <br>
</c:if>

<c:if test="${18 < param.age}">
당신의 나이는 18세 이상입니다.
</c:if>


[코어태그: 흐름제어 태그 - choose]

if else 구문과 유사

문법)

<c:choose>
    <c:when test="조건1">
        ...
    </c:when>
    <c:when test="조건2">
        ...
    </c:when>
    <c:otherwise>
        ...
    </c:otherwise>
</c:choose>


[코어태그: 흐름제어 태그 - forEach]

배열 및 Collection에 저장된 요소를 차례대로 처리한다.

forEach를 이용하면 배열이나 리스트 같은 자료구조에서 정보를 하나씩 뽑아내올 수 있음
마치 for문처럼 특정 조건만큼만 반복하게 만들 수도 있음.

문법)

<c:forEach var="변수" items="아이템" [begin="시작번호"] [end="끝번호"]>
    ...
${변수}
    ...
</c:forEach>

- var - EL에서 사용될 변수명
- items - 배열, List, Iterator, Enumeration, Map 등의 Collection
- begin - items에 지정한 목록에서 값을 읽어올 인덱스의 시작값
- end - item에 지정한 목록에서 값을 읽어올 인덱스의 끝값

item이 Map인 경우 변수에 저장되는 객체는 Map.Entry이다.
따라서 변수값을 사용할 때는 ${변수.key}와 ${변수.value}를 사용해서 맵에 저장된 항목의 <키, 값> 매핑에 접근할 수 있다.


[코어태그: 흐름제어 태그 - import]

지정한 URL에 연결해 결과를 지정한 변수에 저장

특정한 url페이지의 결과를 읽어들여
그 결과를 변수에 저장한 다음에 사용할 수 있게 해줌

문법)

<c:import url="URL" charEncoding="캐릭터인코딩" var="변수명" scope="범위">
    <c:param name="파라미터이름" value="파라미터값" />
</c:import>

- url - 결과를 읽어올 URL
- charEncoding - 읽어온 결과를 저장할 때 사용할 캐릭터 인코딩
- var - 읽어온 결과를 저장할 변수명
- scope - 변수를 저장할 영역
- <c:param> 태그는 url속성에 지정한 사이트에 연결할 때 전송할 파라미터를 입력한다.

예제)

<c:import url="http://media.daum.net/"
        charEncoding="euc-kr"
        var="daumNews"
        scope="request">
    <c:param name="_top_G" value="news" />
</c:import>


[코어태그: 흐름제어 태그 - redirect]

지정한 페이지로 리다이렉트한다. response.sendRedirect()와 비슷

문법)

<c:redirect url="리다이렉트할URL">
    <c:param name="파라미터이름" value="파라미터값" />
</c:redirect>

- url - 리다이렉트 URL
- <c:param>은 리다이렉트할 페이지에 전달할 파라미터 지정

예제)

<c:redirect url="/ifTag.jsp">
    <c:param name="name" value="bk" />
</c:redirect>


[코어태그: 기타 태그 - out]

JspWriter에 데이터를 출력

문법)

<c:out value="value" escapeXml="{true|false}" default="defaultValue" />

- value - JspWriter에 출력할 값을 나타냄.
          일반적으로 value 속성의 값은 String과 같은 문자열.
          만약 value의 값이 java.io.Reader의 한 종류라면 out 태그는 Reader로부터 데이터를 읽어와 JspWriter에 값을 출력.
- escapeXml - 이 속성의 값이 true일 경우 아래 표와 같이 문자를 변경.
              생략할 수 있으며, 생략할 경우 기본값은 true.
- default - value 속성에서 지정한 값이 존재하지 않을 때 사용될 값을 지정.
