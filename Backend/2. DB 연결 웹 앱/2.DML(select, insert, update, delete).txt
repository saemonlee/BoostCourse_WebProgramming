[데이터 조작어(Data Manipulation Language, DML)]

[데이터 조작어의 종류]

데이터 조작어는 모두 동사로 시작.
시작하는 동사에 따라 다음과 같은 4가지 조작어가 있음.

- SELECT - 검색
- INSERT - 등록
- UPDATE - 수정
- DELETE - 삭제


[SELECT 구문의 기본문형]

SELECT(DISTINCT) 칼럼명(ALIAS)
FROM 테이블명;

- SELECT : 검색하고자 하는 데이터(칼럼)를 나열
- DISTINCT : 중복행을 제거
- ALIAS : 나타날 컬럼에 대한 다른 이름 부여
- FROM : 선택한 컬럼이 있는 테이블을 명시


[SELECT 구문 예제(전체 데이터 검색)]

- 전체 데이터 검색
- SELECT 뒤에 *를 기술함으로써 나타낼 수 있음

예제 : departments 테이블의 모든 데이터를 출력

SELECT * FROM DEPARTMENT;


[SELECT 구문 예제(특정 칼럼 검색)]

- SELECT 뒤에 컬럼을 콤마로 구별해서 나열

예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력

select empno, name, job from employee;

- 어떤 칼럼이 있는지는 desc명령으로 확인.


[SELECT 구문 예제(컬럼에 Alias 부여하기)]

- 컬럼에 대한 ALIAS(별칭)을 부여해 나타내는 컬럼의 HEADING을 변경할 수 있음.

예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력

select empno as 사번, name as 이름, job as 직업 from employee;


[SELECT 구문 예제(컬럼의 합성(Concatenation))]

- 문자열 결합함수 concat 사용

예제 : employee 테이블에서 사번과 부서번호를 하나의 칼럼으로 출력

select concat(empno, '-', deptno) as '사번-부서번호' from employee;


[SELECT 구문 예제(중복행의 제거)]

- 중복되는 행이 출력되는 경우, DISTINCT 키워드로 중복행을 제거

예제 1 : 사원 테이블의 모든 부서번호 출력 (사원수만큼 출력)

select deptno from employee;

예제 2 : 사원 테이블의 부서번호를 중복되지 않게 출력

select distinct deptno from employee;


[SELECT 구문 예제(정렬하기)]

ORDER BY 절

SELECT (DISTINCT) 칼럼명 (ALIAS)
FROM 테이블명
ORDER BY 칼럼이나 표현식 (ASC 또는 DESC);

- ASC : 오름차순 정렬, 기본값
- DESC : 내림차순


[SELECT 구문 예제(정렬하기)]

예제 : employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력. 단 이름을 기준으로 오름차순 정렬.

select empno, name, job from employee order by name;

select empno as 사번, name as 이름, job as 직업 from employee order by 이름;


[SELECT 구문 예제(특정 행 검색- where절)]

SELECT (DISTINCT) 칼럼명 (ALIAS)
FROM 테이블명
WHERE 조건식
ORDER BY 칼럼이나 표현식 (ASC 또는 DESC);

조건식 : 컬럼 이름이나 표현식의 상수, 연산자로 구성

WHERE형식 연산자 값

ex)
WHERE title = 'Staff'
WHERE salary BETWEEN 1000 AND 2000

- 산술비교 연산자

예제 : employee 테이블에서 고용일(hiredate)이 1981년 이전의 사원 이름과 고용일을 출력

select name, hiredate from employee where hiredate < '1981-01-01';

- 논리연산자

예제 : employee 테이블에서 부서번호가 30인 사원이름과 부서번호를 출력

select name, deptno from employee where deptno = 30;

- IN 키워드

예제 : employee 테이블에서 부서번호가 10 또는 30인 사원이름과 부서번호를 출력

select name, deptno from employee where deptno in (10, 30);

- LIKE 키워드
- 와일드 카드를 사용하여 특정 문자를 포함한 값에 대한 조건을 처리
- %는 0에서부터 여러 개의 문자열을 나타냄
- _는 단 하나의 문자를 나타내는 와일드 카드

예제 : employee 테이블에서 이름에 'A'가 포함된 사원의 이름(name)과 직업(job)을 출력

select name, job from employee where name like '%A%';


[SELECT 구문 예제(함수의 사용)]

- UCASE, UPPER : 대문자로 바꿔주는 함수

예제)
select upper('SEoul'), UCASE('seOUL');
from 다음에 테이블이 없을 경우에는 테이블에서 조회하는 것이 아님

- LCASE, LOWER : 소문자로 바꿔주는 함수

예제)
select lower('SEoul'), lcase('seOUL');

- SUBSTRING : 문자를 끊어내는 함수

예제)
select substring('Happy Day', 3, 2);
: 3번 인덱스에서 시작해 두 글자 보여달라는 뜻

- LPAD, RPAD : 출력 시 공백이 존재할 경우, 해당 부분의 오른쪽/왼쪽을 지정한 문자로 채워주는 함수

예제)
select lpad('hi', 5, '?'), lpad('joe', 7, '*');

- TRIM, LTRIM, RTRIM : 공백을 없어주는 함수

예제)
select ltrim(' hello '), rtrim(' hello ');

select trim(' hi '), trim(both 'x' from 'xxxhixxx');

- ABS(x) : x의 절대값을 구하는 함수

예제)
select abs(2), abs(-2);


- FLOOR(x) : x보다 크지 않은 가장 큰 정수를 반환. BIGINT로 자동 변환
- CEILING(x) : x보다 작지 않은 가장 작은 정수를 반환
- ROUND(x) : x에 가장 근접한 정수를 반환
- POW(x,y) POWER(x,y) : x의 y 제곱을 반환
- GREATEST(x,y,...) : 가장 큰 값을 반환
- LEAST(x,y,...) : 가장 작은 값을 반환
- CURDATE(), CURRENT_DATE : 오늘 날짜를 YYYY-MM-DD나 YYYYMMDD 형식으로 반환
- CURTIME(), CURRENT_TIME : 현재 시각을 HH:MM:SS나 HHMMSS 형식으로 반환
- NOW(), SYSDATE(), CURRNET_TIMESTAMP : 오늘 현 시각을 YYYY-MM-DD HH:MM:SS나 YYYYMMDDHHMMSS 형식으로 반환
- DATE_FORMAT(date, format) : 입력된 date를 format 형식으로 반환
- PERIOD_DIFF(p1,p2) : YYMM이나 YYYYMM으로 표기되는 p1과 p2의 차이 개월을 반환


[SELECT 구문(CAST 형변환)]

CAST 함수는 type을 변경(지정)하는데 유용

사용법 : CAST(expression AS type) 또는
        CONVERT(expression, type)
        CONVERT(expr USING transcoding_name)

MySQL 타입 : BINARY
            CHAR
            DATE
            DATETIME
            SIGNED (INTEGER)
            TIME
            UNSIGNED (INTEGER)

예제)
select cast(now() as date);

select cast(1-2 as unsigned);


[SELECT 구문(그룹함수)]

- COUNT(expr) : non-NULL인 row의 숫자를 반환
- COUNT(DISTINCT expr, [expr...]) : non-NULL인 중복되지 않은 row의 숫자를 반환
- COUNT(*) : row의 숫자를 반환
- AVG(expr) : expr의 평균값을 반환
- MIN(expr) : expr의 최소값을 반환
- MAX(expr) : expr의 최대값을 반환
- SUM(expr) : expr의 합계를 반환
- GROUP_CONCAT(expr) : 그룹에서 concatenated한 문자를 반환
- VARIANCE(expr) : 분산
- STDDEV(expr) : expr의 표준 편차를 반환

단일함수 : 수행될 때 row 하나하나마다 함수가 적용됨
그룹함수 : 수행될 때 하나의 결과만을 반환

예제 : employee 테이블에서 부서번호가 30인 직원의 급여 평균과 총합계를 출력

select avg(salary), sum(salary) from employee where deptno = 30;


[SELECT 구문 예제(그룹함수와 groupby절)]

예제 : employee 테이블에서 부서별 직원의 부서번호, 급여 평균과 총합계를 출력

select deptno, avg(salary), sum(salary) from employee group by deptno;


[데이터 입력(INSERT문)]

INSERT INTO 테이블명(필드1, 필드2, 필드3, 필드4, ...)
    VALUES(필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, ...)

INSERT INTO 테이블명
    VALUES(필드1의 값, 필드2의 값, 필드3의 값, 필드4의 값, ...)

- 필드명을 지정해주는 방식은 디폴트 값이 세팅되는 필드는 생략할 수 있음
- 필드명을 지정해주는 방식은 추후, 필드가 추가/변경/수정되는 것에 유연하게 대처 가능
- 필드명을 생략했을 경우에는 모든 필드 값을 반드시 입력해야 함


예제 : ROLE 테이블에 role_id는 200, description에는 'CEO'로 한 건의 데이터를 저장

insert into ROLE(role_id, description) values(200, 'CEO');


[데이터 입력(UPDATE문)]

UPDATE 테이블명
SET 필드1=필드1의값, 필드2=필드2의값, 필드3=필드3의값, ...
WHERE 조건식

- 조건식을 통해 특정 row만 변경할 수 있음
- 조건식을 주지 않으면 전체 로우가 영향을 미치니 조심해서 사용하도록 함

예제 : ROLE 테이블에 role_id가 200일 경우 description을 'CTO'로 수정

update ROLE
set description = 'CTO'
where role_id = 200;


[데이터 삭제(DELETE문)]

DELETE
FROM 테이블명
WHERE 조건식

- 조건식을 통해 특정 row만 삭제할 수 있음
- 조건식을 주지 않으면 전체 로우에 영향을 미치니 조심해서 사용하도록 함

예제 : ROLE 테이블에서 role_id가 200인 정보를 삭제

delete from ROLE where role_id = 200;
